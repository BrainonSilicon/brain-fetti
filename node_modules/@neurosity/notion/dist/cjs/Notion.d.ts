import { Observable } from "rxjs";
import { ApiClient, createUser } from "./api/index";
import { NotionOptions } from "./types/options";
import { Training } from "./types/training";
import { Credentials } from "./types/credentials";
import { Settings } from "./types/settings";
import { SignalQuality } from "./types/signalQuality";
import { Kinesis } from "./types/kinesis";
import { Calm } from "./types/calm";
import { Focus } from "./types/focus";
import { BrainwavesLabel, Epoch, PowerByBand, PSD } from "./types/brainwaves";
import { DeviceInfo } from "./types/info";
import { DeviceStatus } from "./types/status";
/**
 * Example
 * ```typescript
 * import { Notion } from "@neurosity/notion";
 *
 * const notion = new Notion({
 *   deviceId: "..."
 * });
 * ```
 */
export declare class Notion {
    /**
     * @hidden
     */
    protected options: NotionOptions;
    /**
     * @hidden
     */
    protected api: ApiClient;
    /**
     *
     * @hidden
     */
    static credentialWithLink: Function;
    /**
     *
     * @hidden
     */
    static createUser: typeof createUser;
    /**
     * Creates new instance of Notion
     *
     * ```typescript
     * const notion = new Notion({
     *   deviceId: "..."
     * });
     * ```
  
     * @param options
     */
    constructor(options: NotionOptions);
    /**
     * Starts user session
     *
     * ```typescript
     * await notion.login({
     *   email: "...",
     *   password: "..."
     * });
     * ```
     *
     * @param credentials
     */
    login(credentials: Credentials): Promise<void>;
    /**
     * Ends user session
     *
     * ```typescript
     * await notion.logout();
     * // session has ended
     * ```
     *
     */
    logout(): Promise<void>;
    /**
     * ```typescript
     * const info = await notion.getInfo();
     * ```
     */
    getInfo(): Promise<DeviceInfo>;
    /**
     * Ends database connection
     *
     * ```typescript
     * await notion.disconnect();
     * ```
     */
    disconnect(): Promise<void>;
    /**
     * Injects an EEG marker to data stream
     *
     * ```typescript
     * notion.addMarker("eyes-closed");
     *
     * // later...
     *
     * notion.addMarker("eyes-open");
     * ```
     *
     * @param label Name the label to inject
     */
    addMarker(label: string): void;
    /**
     *
     * Example
     * ```typescript
     * notion.brainwaves("raw").subscribe(brainwaves => {
     *   console.log(brainwaves);
     * });
     * ```
     *
     * Example
     * ```typescript
     * notion.brainwaves("powerByBand").subscribe(brainwaves => {
     *   console.log(brainwaves);
     * });
     * ```
     *
     * Example
     * ```typescript
     * notion.brainwaves("psd").subscribe(brainwaves => {
     *   console.log(brainwaves);
     * });
     * ```
     *
     * @param labels Name of metric properties to filter by
     * @returns Observable of brainwaves metric events
     */
    brainwaves(label: BrainwavesLabel, ...otherLabels: BrainwavesLabel[]): Observable<Epoch | PowerByBand | PSD>;
    /**
     * Example
     * ```typescript
     * notion.calm().subscribe(calm => {
     *   console.log(calm.probability);
     * });
     *
     * // 0.45
     * // 0.47
     * // 0.53
     * // 0.51
     * // ...
     * ```
     *
     * @returns Observable of calm events - awareness/calm alias
     */
    calm(): Observable<Calm>;
    /**
     * Observes signal quality data where each property is the name
     * of the channel and the value includes the standard deviation and
     * a status set by the device
     *
     * ```typescript
     * notion.signalQuality().subscribe(signalQuality => {
     *   console.log(signalQuality);
     * });
     *
     * // { FC6: { standardDeviation: 3.5, status: "good" }, C3: {...}, ... }
     * ```
     *
     * @returns Observable of signalQuality metric events
     */
    signalQuality(): Observable<SignalQuality>;
    /**
     * Observes last state of `settings` and all subsequent `settings` changes
     *
     * ```typescript
     * notion.settings().subscribe(settings => {
     *   console.log(settings.lsl);
     * });
     *
     * // true
     * // ...
     * ```
     *
     * @returns Observable of `settings` metric events
     */
    settings(): Observable<Settings>;
    /**
     * Example
     * ```typescript
     * notion.focus().subscribe(focus => {
     *   console.log(focus.probability);
     * });
     *
     * // 0.56
     * // 0.46
     * // 0.31
     * // 0.39
     * // ...
     * ```
     *
     * @returns Observable of focus events - awareness/focus alias
     */
    focus(): Observable<Focus>;
    /**
     * @param labels Name of metric properties to filter by
     * @returns Observable of kinesis metric events
     */
    kinesis(label: string, ...otherLabels: string[]): Observable<Kinesis>;
    /**
     * @param labels Name of metric properties to filter by
     * @returns Observable of predictions metric events
     */
    predictions(label: string, ...otherLabels: string[]): Observable<any>;
    /**
     * Observes last state of `status` and all subsequent `status` changes
     *
     * ```typescript
     * notion.status().subscribe(status => {
     *   console.log(status.state);
     * });
     *
     * // "online"
     * // ...
     * ```
     *
     * @returns Observable of `status` metric events
     */
    status(): Observable<DeviceStatus>;
    /**
     *
     * ```typescript
     * notion.training.record({
     *   metric: "kinesis",
     *   label: "push"
     * });
     *
     * notion.training.stop({
     *   metric: "kinesis",
     *   label: "push"
     * });
     * ```
     *
     * @returns Training methods
     */
    get training(): Training;
}
