import { Observable } from "rxjs";
import "firebase/database";
import "firebase/functions";
import "firebase/auth";
import { User } from "@firebase/auth-types";
import { NotionOptions } from "../../types/options";
import { Credentials } from "../../types/credentials";
/**
 * @hidden
 */
export declare const credentialWithLink: Function;
/**
 * @hidden
 */
export declare function createUser(...args: any[]): any;
/**
 * @hidden
 */
export declare class FirebaseClient {
    serverType: string;
    protected standalone: boolean;
    protected app: any;
    protected deviceStore: any;
    user: User | null;
    constructor(options: NotionOptions);
    private init;
    auth(): any;
    onAuthStateChanged(): Observable<User | null>;
    onLogin(): Observable<User>;
    login(credentials: Credentials): any;
    logout(): any;
    private getApp;
    dispatchAction(action: any): Promise<any>;
    getInfo(): Promise<any>;
    getSkill(bundleId: any): Promise<any>;
    onNamespace(namespace: string, callback: Function): Function;
    offNamespace(namespace: string, listener: Function): void;
    getTimesync(): Promise<number>;
    httpsCallable(functionName: string, data: object): any;
    /**
     * Pushes metric for each subscriptions in path:
     * /devices/:deviceId/metrics/:metricName
     */
    nextMetric(metricName: string, metricValue: {
        [label: string]: any;
    }): void;
    /**
     * Listens for metrics in path:
     * /devices/:deviceId/metrics/:metricName
     */
    onMetric(subscription: any, callback: any): void;
    /**
     * Creates a new and unique subscription in path:
     * /devices/:deviceId/subscriptions/:subscriptionId
     * E.g. /devices/device1/subscriptions/subscription3
     *
     * @param subscription
     * @returns subscriptionId
     */
    subscribeToMetric(subscription: any): any;
    /**
     * Removes subscription in path:
     * /devices/:deviceId/subscriptions/:subscriptionId
     *
     * @param metric
     * @param subscriptionId
     */
    unsubscribFromMetric(subscription: any, listener: Function): void;
    get timestamp(): any;
    changeSettings(settings: any): Promise<void>;
    disconnect(): Promise<any>;
}
